/* $$ This file has been instrumented by Clover 4.4.1#2019101123313948 $$ *//*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.tz;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;

import org.joda.time.DateTimeZone;

/**
 * ZoneInfoProvider loads compiled data files as generated by
 * {@link ZoneInfoCompiler}.
 * <p>
 * ZoneInfoProvider is thread-safe and publicly immutable.
 *
 * @author Brian S O'Neill
 * @since 1.0
 */
public class ZoneInfoProvider implements Provider {public static class __CLR4_4_1h76h76lgchor9v{public static com_atlassian_clover.CoverageRecorder R;public static com_atlassian_clover.CloverProfile[] profiles = { };@java.lang.SuppressWarnings("unchecked") public static <I, T extends I> I lambdaInc(final int i,final T l,final int si){java.lang.reflect.InvocationHandler h=new java.lang.reflect.InvocationHandler(){public java.lang.Object invoke(java.lang.Object p,java.lang.reflect.Method m,java.lang.Object[] a) throws Throwable{R.inc(i);R.inc(si);try{return m.invoke(l,a);}catch(java.lang.reflect.InvocationTargetException e){throw e.getCause()!=null?e.getCause():new RuntimeException("Clover failed to invoke instrumented lambda",e);}}};return (I)java.lang.reflect.Proxy.newProxyInstance(l.getClass().getClassLoader(),l.getClass().getInterfaces(),h);}static{com_atlassian_clover.CoverageRecorder _R=null;try{com_atlassian_clover.CloverVersionInfo.An_old_version_of_clover_is_on_your_compilation_classpath___Please_remove___Required_version_is___4_4_1();if(2019101123313948L!=com_atlassian_clover.CloverVersionInfo.getBuildStamp()){com_atlassian_clover.Clover.l("[CLOVER] WARNING: The Clover version used in instrumentation does not match the runtime version. You need to run instrumented classes against the same version of Clover that you instrumented with.");com_atlassian_clover.Clover.l("[CLOVER] WARNING: Instr=4.4.1#2019101123313948,Runtime="+com_atlassian_clover.CloverVersionInfo.getReleaseNum()+"#"+com_atlassian_clover.CloverVersionInfo.getBuildStamp());}R=com_atlassian_clover.Clover.getNullRecorder();_R=com_atlassian_clover.Clover.getNullRecorder();_R=com_atlassian_clover.Clover.getRecorder("\u002f\u006d\u0065\u0064\u0069\u0061\u002f\u0073\u006f\u006e\u0065\u0079\u0061\u002f\u0065\u0078\u0074\u0072\u0061\u0064\u0072\u0069\u0076\u0065\u0031\u002f\u0063\u006f\u0076\u0065\u0072\u0061\u0067\u0065\u0068\u0069\u0074\u0063\u006f\u0075\u006e\u0074\u0065\u0072\u002f\u0073\u0072\u0063\u002f\u0074\u0065\u0073\u0074\u002f\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u002f\u006a\u006f\u0064\u0061\u002d\u0074\u0069\u006d\u0065\u002f\u0074\u0061\u0072\u0067\u0065\u0074\u002f\u0063\u006c\u006f\u0076\u0065\u0072\u002f\u0063\u006c\u006f\u0076\u0065\u0072\u002e\u0064\u0062",1681231264416L,8589935092L,22421,profiles,new java.lang.String[]{"clover.distributed.coverage",null});}catch(java.lang.SecurityException e){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised because it has insufficient security privileges. Please consult the Clover documentation on the security policy file changes required. ("+e.getClass()+":"+e.getMessage()+")");}catch(java.lang.NoClassDefFoundError e){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised. Are you sure you have Clover in the runtime classpath? ("+e.getClass()+":"+e.getMessage()+")");}catch(java.lang.Throwable t){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised because of an unexpected error. ("+t.getClass()+":"+t.getMessage()+")");}R=_R;}}public static final com_atlassian_clover.TestNameSniffer __CLR4_4_1_TEST_NAME_SNIFFER=com_atlassian_clover.TestNameSniffer.NULL_INSTANCE;

    /**
     * The directory where the files are held.
     */
    private final File iFileDir;
    /**
     * The resource path.
     */
    private final String iResourcePath;
    /**
     * The class loader to use.
     */
    private final ClassLoader iLoader;
    /**
     * Maps ids to strings or SoftReferences to DateTimeZones.
     */
    private final Map<String, Object> iZoneInfoMap;
    /**
     * Maps ids to strings or SoftReferences to DateTimeZones.
     */
    private final Set<String> iZoneInfoKeys;

    /**
     * Search the default classloader resource path for compiled data files.
     *
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider() throws IOException {
        this(DateTimeZone.DEFAULT_TZ_DATA_PATH);__CLR4_4_1h76h76lgchor9v.R.inc(22291);try{__CLR4_4_1h76h76lgchor9v.R.inc(22290);
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * ZoneInfoProvider searches the given directory for compiled data files.
     *
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(File fileDir) throws IOException {try{__CLR4_4_1h76h76lgchor9v.R.inc(22292);
        __CLR4_4_1h76h76lgchor9v.R.inc(22293);if ((((fileDir == null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22294)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22295)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22296);throw new IllegalArgumentException("No file directory provided");
        }
        }__CLR4_4_1h76h76lgchor9v.R.inc(22297);if ((((!fileDir.exists())&&(__CLR4_4_1h76h76lgchor9v.R.iget(22298)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22299)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22300);throw new IOException("File directory doesn't exist: " + fileDir);
        }
        }__CLR4_4_1h76h76lgchor9v.R.inc(22301);if ((((!fileDir.isDirectory())&&(__CLR4_4_1h76h76lgchor9v.R.iget(22302)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22303)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22304);throw new IOException("File doesn't refer to a directory: " + fileDir);
        }

        }__CLR4_4_1h76h76lgchor9v.R.inc(22305);iFileDir = fileDir;
        __CLR4_4_1h76h76lgchor9v.R.inc(22306);iResourcePath = null;
        __CLR4_4_1h76h76lgchor9v.R.inc(22307);iLoader = null;

        __CLR4_4_1h76h76lgchor9v.R.inc(22308);iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
        __CLR4_4_1h76h76lgchor9v.R.inc(22309);iZoneInfoKeys = Collections.unmodifiableSortedSet(new TreeSet<String>(iZoneInfoMap.keySet()));
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * ZoneInfoProvider searches the given ClassLoader resource path for
     * compiled data files. Resources are loaded from the ClassLoader that
     * loaded this class.
     *
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(String resourcePath) throws IOException {
        this(resourcePath, null, false);__CLR4_4_1h76h76lgchor9v.R.inc(22311);try{__CLR4_4_1h76h76lgchor9v.R.inc(22310);
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * ZoneInfoProvider searches the given ClassLoader resource path for
     * compiled data files.
     *
     * @param loader ClassLoader to load compiled data files from. If null,
     *               use system ClassLoader.
     * @throws IOException if directory or map file cannot be read
     */
    public ZoneInfoProvider(String resourcePath, ClassLoader loader)
            throws IOException {
        this(resourcePath, loader, true);__CLR4_4_1h76h76lgchor9v.R.inc(22313);try{__CLR4_4_1h76h76lgchor9v.R.inc(22312);
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * @param favorSystemLoader when true, use the system class loader if
     *                          loader null. When false, use the current class loader if loader is null.
     */
    private ZoneInfoProvider(String resourcePath,
                             ClassLoader loader, boolean favorSystemLoader)
            throws IOException {try{__CLR4_4_1h76h76lgchor9v.R.inc(22314);
        __CLR4_4_1h76h76lgchor9v.R.inc(22315);if ((((resourcePath == null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22316)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22317)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22318);throw new IllegalArgumentException("No resource path provided");
        }
        }__CLR4_4_1h76h76lgchor9v.R.inc(22319);if ((((!resourcePath.endsWith("/"))&&(__CLR4_4_1h76h76lgchor9v.R.iget(22320)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22321)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22322);resourcePath += '/';
        }

        }__CLR4_4_1h76h76lgchor9v.R.inc(22323);iFileDir = null;
        __CLR4_4_1h76h76lgchor9v.R.inc(22324);iResourcePath = resourcePath;

        __CLR4_4_1h76h76lgchor9v.R.inc(22325);if ((((loader == null && !favorSystemLoader)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22326)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22327)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22328);loader = getClass().getClassLoader();
        }

        }__CLR4_4_1h76h76lgchor9v.R.inc(22329);iLoader = loader;

        __CLR4_4_1h76h76lgchor9v.R.inc(22330);iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
        __CLR4_4_1h76h76lgchor9v.R.inc(22331);iZoneInfoKeys = Collections.unmodifiableSortedSet(new TreeSet<String>(iZoneInfoMap.keySet()));
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    //-----------------------------------------------------------------------

    /**
     * If an error is thrown while loading zone data, the exception is logged
     * to system error and null is returned for this and all future requests.
     *
     * @param id the id to load
     * @return the loaded zone
     */
    public DateTimeZone getZone(String id) {try{__CLR4_4_1h76h76lgchor9v.R.inc(22332);
        __CLR4_4_1h76h76lgchor9v.R.inc(22333);if ((((id == null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22334)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22335)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22336);return null;
        }

        }__CLR4_4_1h76h76lgchor9v.R.inc(22337);Object obj = iZoneInfoMap.get(id);
        __CLR4_4_1h76h76lgchor9v.R.inc(22338);if ((((obj == null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22339)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22340)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22341);return null;
        }

        }__CLR4_4_1h76h76lgchor9v.R.inc(22342);if ((((obj instanceof SoftReference<?>)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22343)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22344)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22345);@SuppressWarnings("unchecked")
            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
            __CLR4_4_1h76h76lgchor9v.R.inc(22346);DateTimeZone tz = ref.get();
            __CLR4_4_1h76h76lgchor9v.R.inc(22347);if ((((tz != null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22348)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22349)==0&false))) {{
                __CLR4_4_1h76h76lgchor9v.R.inc(22350);return tz;
            }
            // Reference cleared; load data again.
            }__CLR4_4_1h76h76lgchor9v.R.inc(22351);return loadZoneData(id);
        } }else {__CLR4_4_1h76h76lgchor9v.R.inc(22352);if ((((id.equals(obj))&&(__CLR4_4_1h76h76lgchor9v.R.iget(22353)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22354)==0&false))) {{
            // Load zone data for the first time.
            __CLR4_4_1h76h76lgchor9v.R.inc(22355);return loadZoneData(id);
        }

        // If this point is reached, mapping must link to another.
        }}__CLR4_4_1h76h76lgchor9v.R.inc(22356);return getZone((String) obj);
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * Gets a list of all the available zone ids.
     *
     * @return the zone ids
     */
    public Set<String> getAvailableIDs() {try{__CLR4_4_1h76h76lgchor9v.R.inc(22357);
        __CLR4_4_1h76h76lgchor9v.R.inc(22358);return iZoneInfoKeys;
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * Called if an exception is thrown from getZone while loading zone data.
     *
     * @param ex the exception
     */
    protected void uncaughtException(Exception ex) {try{__CLR4_4_1h76h76lgchor9v.R.inc(22359);
        __CLR4_4_1h76h76lgchor9v.R.inc(22360);ex.printStackTrace();
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * Opens a resource from file or classpath.
     *
     * @param name the name to open
     * @return the input stream
     * @throws IOException if an error occurs
     */
    @SuppressWarnings("resource")
    private InputStream openResource(String name) throws IOException {try{__CLR4_4_1h76h76lgchor9v.R.inc(22361);
        __CLR4_4_1h76h76lgchor9v.R.inc(22362);InputStream in;
        __CLR4_4_1h76h76lgchor9v.R.inc(22363);if ((((iFileDir != null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22364)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22365)==0&false))) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22366);in = new FileInputStream(new File(iFileDir, name));
        } }else {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22367);final String path = iResourcePath.concat(name);
            __CLR4_4_1h76h76lgchor9v.R.inc(22368);in = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {
                public InputStream run() {try{__CLR4_4_1h76h76lgchor9v.R.inc(22369);
                    __CLR4_4_1h76h76lgchor9v.R.inc(22370);if ((((iLoader != null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22371)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22372)==0&false))) {{
                        __CLR4_4_1h76h76lgchor9v.R.inc(22373);return iLoader.getResourceAsStream(path);
                    } }else {{
                        __CLR4_4_1h76h76lgchor9v.R.inc(22374);return ClassLoader.getSystemResourceAsStream(path);
                    }
                }}finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}
            });
            __CLR4_4_1h76h76lgchor9v.R.inc(22375);if ((((in == null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22376)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22377)==0&false))) {{
                __CLR4_4_1h76h76lgchor9v.R.inc(22378);StringBuilder buf = new StringBuilder(40)
                        .append("Resource not found: \"")
                        .append(path)
                        .append("\" ClassLoader: ")
                        .append((((iLoader != null )&&(__CLR4_4_1h76h76lgchor9v.R.iget(22379)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22380)==0&false))? iLoader.toString() : "system");
                __CLR4_4_1h76h76lgchor9v.R.inc(22381);throw new IOException(buf.toString());
            }
        }}
        }__CLR4_4_1h76h76lgchor9v.R.inc(22382);return in;
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * Loads the time zone data for one id.
     *
     * @param id the id to load
     * @return the zone
     */
    private DateTimeZone loadZoneData(String id) {try{__CLR4_4_1h76h76lgchor9v.R.inc(22383);
        __CLR4_4_1h76h76lgchor9v.R.inc(22384);InputStream in = null;
        __CLR4_4_1h76h76lgchor9v.R.inc(22385);try {
            __CLR4_4_1h76h76lgchor9v.R.inc(22386);in = openResource(id);
            __CLR4_4_1h76h76lgchor9v.R.inc(22387);DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
            __CLR4_4_1h76h76lgchor9v.R.inc(22388);iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
            __CLR4_4_1h76h76lgchor9v.R.inc(22389);return tz;
        } catch (IOException ex) {
            __CLR4_4_1h76h76lgchor9v.R.inc(22390);uncaughtException(ex);
            __CLR4_4_1h76h76lgchor9v.R.inc(22391);iZoneInfoMap.remove(id);
            __CLR4_4_1h76h76lgchor9v.R.inc(22392);return null;
        } finally {
            __CLR4_4_1h76h76lgchor9v.R.inc(22393);try {
                __CLR4_4_1h76h76lgchor9v.R.inc(22394);if ((((in != null)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22395)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22396)==0&false))) {{
                    __CLR4_4_1h76h76lgchor9v.R.inc(22397);in.close();
                }
            }} catch (IOException ex) {
            }
        }
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    //-----------------------------------------------------------------------

    /**
     * Loads the zone info map.
     *
     * @param in the input stream
     * @return the map
     */
    private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {try{__CLR4_4_1h76h76lgchor9v.R.inc(22398);
        __CLR4_4_1h76h76lgchor9v.R.inc(22399);Map<String, Object> map = new ConcurrentHashMap<String, Object>();
        __CLR4_4_1h76h76lgchor9v.R.inc(22400);DataInputStream din = new DataInputStream(in);
        __CLR4_4_1h76h76lgchor9v.R.inc(22401);try {
            __CLR4_4_1h76h76lgchor9v.R.inc(22402);readZoneInfoMap(din, map);
        } finally {
            __CLR4_4_1h76h76lgchor9v.R.inc(22403);try {
                __CLR4_4_1h76h76lgchor9v.R.inc(22404);din.close();
            } catch (IOException ex) {
            }
        }
        __CLR4_4_1h76h76lgchor9v.R.inc(22405);map.put("UTC", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
        __CLR4_4_1h76h76lgchor9v.R.inc(22406);return map;
    }finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

    /**
     * Reads the zone info map from file.
     *
     * @param din   the input stream
     * @param zimap gets filled with string id to string id mappings
     */
    private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {try{__CLR4_4_1h76h76lgchor9v.R.inc(22407);
        // Read the string pool.
        __CLR4_4_1h76h76lgchor9v.R.inc(22408);int size = din.readUnsignedShort();
        __CLR4_4_1h76h76lgchor9v.R.inc(22409);String[] pool = new String[size];
        __CLR4_4_1h76h76lgchor9v.R.inc(22410);for (int i = 0; (((i < size)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22411)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22412)==0&false)); i++) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22413);pool[i] = din.readUTF().intern();
        }

        // Read the mappings.
        }__CLR4_4_1h76h76lgchor9v.R.inc(22414);size = din.readUnsignedShort();
        __CLR4_4_1h76h76lgchor9v.R.inc(22415);for (int i = 0; (((i < size)&&(__CLR4_4_1h76h76lgchor9v.R.iget(22416)!=0|true))||(__CLR4_4_1h76h76lgchor9v.R.iget(22417)==0&false)); i++) {{
            __CLR4_4_1h76h76lgchor9v.R.inc(22418);try {
                __CLR4_4_1h76h76lgchor9v.R.inc(22419);zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
            } catch (ArrayIndexOutOfBoundsException ex) {
                __CLR4_4_1h76h76lgchor9v.R.inc(22420);throw new IOException("Corrupt zone info map");
            }
        }
    }}finally{__CLR4_4_1h76h76lgchor9v.R.flushNeeded();}}

}
